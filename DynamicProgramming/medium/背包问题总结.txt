

01背包理论
有N件物品和一个最多能背重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i]。每件物品只能用一次，
求解将哪些物品装入背包里物品价值总和最大。

示例: weight:[1,3,4];value:[15,20,30],w=4
输出35

遍历顺序：
先遍历物品，还是先遍历背包都可以，先遍历物品更容易理解一些，内层遍历背包必须是逆序(从大到小)

02 完全背包理论
有N件物品和一个最多能背重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品都有无限个
（也就是可以放入背包多次），求解将哪些物品装入背包里物品价值总和最大。

完全背包和01背包问题唯一不同的地方就是，每种物品可以重复放入，次数不限。
完全背包与01背包主要不同在于遍历顺序，注意完全背包的物品是可以添加多次的，所以内层遍历背包要从小到大去遍历(正序遍历)

03 排列数和组合数问题
如果求组合数就是外层for循环遍历物品，内层for遍历背包；
如果求排列数就是外层for遍历背包，内层for循环遍历物品。
如果是完全背包，则遍历背包要从小到大去遍历(正序遍历)

因为求组合数，不讲究元素的顺序，如果先遍历背包，后遍历物品计算的是排列数，会有重复。