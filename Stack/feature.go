package Stack


/*
1.1  有效的括号
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串s ，判断字符串是否有效。
有效字符串需满足：
左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。

示例1：
输入：s = "()"
输出：true
示例2：

输入：s = "()[]{}"
输出：true
示例3：

输入：s = "(]"
输出：false
示例4：

输入：s = "([)]"
输出：false
示例5：

输入：s = "{[]}"
输出：true
 */

/*
栈+哈希表解决
我们遍历给定的字符串s。当我们遇到一个左括号时，我们会期望在后续的遍历中，有一个相同类型的右括号将其闭合。由于后遇到的左括号要先闭合，因此
我们可以将这个左括号放入栈顶。当我们遇到一个右括号时，我们需要将一个相同类型的左括号闭合。此时，我们可以取出栈顶的左括号并判断它们是否是
相同类型的括号。如果不是相同的类型，或者栈中并没有左括号，那么字符串ss无效，返回False。为了快速判断括号的类型，我们可以使用哈希表存储
每一种括号。哈希表的键为右括号，值为相同类型的左括号。
在遍历结束后，如果栈中没有左括号，说明我们将字符串s中的所有左括号闭合，返回True，否则返回False。
注意到有效字符串的长度一定为偶数，因此如果字符串的长度为奇数，我们可以直接返回False，省去后续的遍历判断过程。
 */

func IsValid(s string)bool{
	length := len(s)
	if length % 2 == 1{
		return false
	}
	pairs := map[byte]byte{')':'(',']':'[','}':'{'}
	var stack []byte
	for i:=0;i<length;i++{
		if s[i] == '('|| s[i] == '[' || s[i] == '{'{
			stack = append(stack, s[i])
		} else if len(stack) > 0 && stack[len(stack)-1] == pairs[s[i]]{
			stack = stack[:len(stack)-1]
		} else{
			return false
		}
	}
	return len(stack) == 0
}
