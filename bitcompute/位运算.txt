
1 什么是位运算？

位运算是直接操作数字的二进制位（bit），每个位是 0 或 1。在计算机中，整数以二进制形式存储，例如：
3 在二进制中是 11。
2 在二进制中是 10。

位运算的规则是逐位比较两个数的对应位，根据操作类型得出结果。

1. 异或运算（XOR，符号：^）

规则: 两个位相同结果为 0，不同结果为 1。
例子
5 ^ 3：
5 = 101，3 = 011

101 ^ 011：
第1位：1 ^ 1 = 0
第2位：0 ^ 1 = 1
第3位：1 ^ 0 = 1
结果：110（十进制 6）。

特点
异或可以看作“无进位加法”：
0 ^ 0 = 0（0+0=0）
0 ^ 1 = 1（0+1=1）
1 ^ 0 = 1（1+0=1）
1 ^ 1 = 0（1+1=10，为什么是10，二进制是逢2进1，所以1+1低位补0，高位进1就是10，将进位忽略后为0）。




2 与运算（AND，符号：&）

规则：两个位都为 1 时结果为 1，否则为 0。

例子：011 & 010

第1位：1 & 0 = 0
第2位：1 & 1 = 1
第3位：0 & 0 = 0

结果：010（十进制 2）。

用途
在加法中，& 用于检测进位：
只有当两个位都是 1 时，才会产生进位。


3 或运算（OR，符号：|）

规则定义：两个位只要有一个为 1，结果为 1，都为 0 时才为 0。

例子：011 | 010

第1位：1 | 0 = 1
第2位：1 | 1 = 1
第3位：0 | 0 = 0

结果：011（十进制 3）。

用途
用于合并位信息，例如设置某些位为 1。

4 非运算（NOT，符号：~）

规则: 将每一位取反，0 变 1，1 变 0。

注意：在 Go 中，~ 作用于整个整数，涉及符号位（补码表示）。

例子：~010
010（十进制 2）
~010 = 101（但实际是按32位或64位补码计算，结果为负数）。

在32位补码中：~2 = -3。

用途
用于取反或计算补码。

5. 左移（Left Shift，符号：<<）

规则: 将二进制数向左移动指定位数，低位补 0。
效果：相当于乘以 2 的移动位数次方。

例子：010 << 1
010 << 1 = 100（十进制 4）。
010 << 2 = 1000（十进制 8）。

用途
在加法中，将进位移到高一位。

6. 右移（Right Shift，符号：>>）

规则：将二进制数向右移动指定位数。
有符号右移（>>）：高位补符号位（正数补0，负数补1）。
无符号右移（>>> 不存在于Go，用类型转换实现）。

效果：相当于除以 2 的移动位数次方。

例子：100 >> 1
100 >> 1 = 010（十进制 2）。
-4 = 11111100 >> 1 = 11111110（补码表示，仍为负数）。

